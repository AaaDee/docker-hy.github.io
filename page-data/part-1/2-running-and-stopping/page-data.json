{
    "componentChunkName": "component---src-templates-course-content-template-js",
    "path": "/part-1/2-running-and-stopping",
    "result": {"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next we will start using a more useful image than hello-world. We can run Ubuntu just with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run ubuntu"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run ubuntu\n  Unable to find image 'ubuntu:latest' locally\n  latest: Pulling from library/ubuntu\n  83ee3a23efb7: Pull complete\n  db98fc6f11f0: Pull complete\n  f611acd52c6c: Pull complete\n  Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715\n  Status: Downloaded newer image for ubuntu:latest"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" will create a "},{"type":"element","tagName":"a","properties":{"href":"https://itsfoss.com/what-is-tty-in-linux/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"tty"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -t ubuntu\n  root@f83969ce2cd1:/#"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we're inside the container and if we input "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" and press enter... nothing happens. Because our terminal is not sending the messages into the container. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" flag will instruct to pass the STDIN to the container. If you're stuck with the other terminal you can just stop the container."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! Now we know at least 3 useful flags. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" (interactive), "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" (tty) and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" (detached)."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's throw in a few more and run a container in the background:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -d -it --name looper ubuntu sh -c 'while true; do date; sleep 1; done'"}]}]}]},{"type":"element","tagName":"text-box","properties":{"name":"Quotes","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are command prompt (Windows) user you must use double quotes around the script i.e. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -d -it --name looper ubuntu sh -c \"while true; do date; sleep 1; done\""}]},{"type":"text","value":". The quote or double-quote may haunt you later during the course."}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first part, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -d"}]},{"type":"text","value":". Should be familiar by now, run container detached."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Followed by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" is short for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":". Also familiar, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" allows you to interact with the container by using the command line."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because we ran the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--name looper"}]},{"type":"text","value":", we can now reference it easily."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The image is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" and what follows it is the command given to the container."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And to check that it's running, run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container ls"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's follow "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-f"}]},{"type":"text","value":" the output of logs with"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker logs -f looper\n  Thu Mar  1 15:51:29 UTC 2023\n  Thu Mar  1 15:51:30 UTC 2023\n  Thu Mar  1 15:51:31 UTC 2023\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's test pausing the looper without exiting or stopping it. In another terminal run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker pause looper"}]},{"type":"text","value":". Notice how the logs output has paused in the first terminal. To unpause run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker unpause looper"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Keep the logs open and attach to the running container from the second terminal using 'attach':"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper\n  Thu Mar  1 15:54:38 UTC 2023\n  Thu Mar  1 15:54:39 UTC 2023\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":" option. Let's start the stopped container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start looper"}]},{"type":"text","value":" and attach to it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then try control+c."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker start looper\n\n$ docker attach --no-stdin looper\n  Thu Mar  1 15:56:11 UTC 2023\n  Thu Mar  1 15:56:12 UTC 2023\n  ^C"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The container will continue running. Control+c now only disconnects you from the STDOUT."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To enter a container, we can start a new process in it."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ps aux"}]},{"type":"text","value":" listing we can see that our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" process got PID (process ID) of 64."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we're inside the container it behaves as you'd expect from Ubuntu, and we can exit the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":" and then either kill or stop the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker kill looper\n$ docker rm looper"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running the previous two commands is basically equivalent to running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker rm --force looper"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's start another process with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" and add "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" in order to remove it automatically after it has exited. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" ensures that there are no garbage containers left behind. It also means that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start"}]},{"type":"text","value":" can not be used to start the container after it has exited."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -d --rm -it --name looper-it ubuntu sh -c 'while true; do date; sleep 1; done'"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper-it\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run"}]},{"type":"text","value":" command."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.3: Secret message"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've warmed up it's time to get inside a container while it's running!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Image "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:ubuntu"}]},{"type":"text","value":" will start a container that outputs logs into a file.\nGo inside the container and use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tail -f ./text.log"}]},{"type":"text","value":" to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the secret message and command(s) given as your answer."}]}]},{"type":"element","tagName":"h3","properties":{"id":"ubuntu-in-a-container-is-just-ubuntu","style":"position:relative;"},"children":[{"type":"text","value":"Ubuntu in a container is just... Ubuntu"},{"type":"element","tagName":"a","properties":{"href":"#ubuntu-in-a-container-is-just-ubuntu","ariaLabel":"ubuntu in a container is just ubuntu permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A container that is running a Ubuntu image works quite like a normal Ubuntu:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it ubuntu\nroot@881a1d4ecff2:/# ls\nbin   dev  home  media  opt   root  sbin  sys  usr\nboot  etc  lib   mnt    proc  run   srv   tmp  var\nroot@881a1d4ecff2:/# ps\n  PID TTY          TIME CMD\n    1 pts/0    00:00:00 bash\n   13 pts/0    00:00:00 ps\nroot@881a1d4ecff2:/# date\nWed Mar  1 12:08:24 UTC 2023\nroot@881a1d4ecff2:/#"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An image like Ubuntu contains already a nice set of tools but sometimes just the one that we need is not within the standard distribution. Let us assume that we would like to edit some files inside the container. The good old "},{"type":"element","tagName":"a","properties":{"href":"https://www.nano-editor.org/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Nano"}]},{"type":"text","value":" editor is a perfect fit for our purposes. We can install it in the container by using "},{"type":"element","tagName":"a","properties":{"href":"https://help.ubuntu.com/community/AptGet/Howto","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"apt-get"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it ubuntu\nroot@881a1d4ecff2:/# apt-get update\nroot@881a1d4ecff2:/# apt-get -y install nano\nroot@881a1d4ecff2:/# cd tmp/\nroot@881a1d4ecff2:/tmp# nano temp_file.txt"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As can be seen, installing a program or library to a container happens just like the installation is done in \"normal\" Ubuntu. The remarkable difference is that the installation of Nano is not permanent, that is, if we remove our container, all is gone. We shall soon see how to get a more permanent solution for building images that are perfect to our purposes."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.4: Missing dependencies"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Start a ubuntu image with the process "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sh -c 'echo \"Input website:\"; read website; echo \"Searching..\"; sleep 1; curl http://$website;'"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the container actually waits for input."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Test inputting "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"helsinki.fi"}]},{"type":"text","value":" into the application. It should respond with something like"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"html"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"301 Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"The document has moved "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","attr-name"]},"children":[{"type":"text","value":"href"}]},{"type":"element","tagName":"span","properties":{"className":["token","attr-value"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation","attr-equals"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]},{"type":"text","value":"http://www.helsinki.fi/"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"here"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"."},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This time return the command you used to start process and the command(s) you used to fix the ensuing problems."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?"}]},{"type":"text","value":"\n"}]}]}]},"html":"<div><p>Next we will start using a more useful image than hello-world. We can run Ubuntu just with <code class=\"language-text\">docker run ubuntu</code>.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run ubuntu\n  Unable to find image &#39;ubuntu:latest&#39; locally\n  latest: Pulling from library/ubuntu\n  83ee3a23efb7: Pull complete\n  db98fc6f11f0: Pull complete\n  f611acd52c6c: Pull complete\n  Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715\n  Status: Downloaded newer image for ubuntu:latest</code></pre></div><p>Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. <code class=\"language-text\">-t</code> will create a <a href=\"https://itsfoss.com/what-is-tty-in-linux/\" target=\"_blank\" rel=\"noopener noreferrer\">tty</a>.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -t ubuntu\n  root@f83969ce2cd1:/#</code></pre></div><p>Now we're inside the container and if we input <code class=\"language-text\">ls</code> and press enter... nothing happens. Because our terminal is not sending the messages into the container. The <code class=\"language-text\">-i</code> flag will instruct to pass the STDIN to the container. If you're stuck with the other terminal you can just stop the container.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</code></pre></div><p>Great! Now we know at least 3 useful flags. <code class=\"language-text\">-i</code> (interactive), <code class=\"language-text\">-t</code> (tty) and <code class=\"language-text\">-d</code> (detached).</p><p>Let's throw in a few more and run a container in the background:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -d -it --name looper ubuntu sh -c &#39;while true; do date; sleep 1; done&#39;</code></pre></div><text-box name=\"Quotes\" variant=\"hint\"><p>If you are command prompt (Windows) user you must use double quotes around the script i.e. <code class=\"language-text\">docker run -d -it --name looper ubuntu sh -c \"while true; do date; sleep 1; done\"</code>. The quote or double-quote may haunt you later during the course.</p></text-box><ul>\n<li>\n<p>The first part, <code class=\"language-text\">docker run -d</code>. Should be familiar by now, run container detached.</p>\n</li>\n<li>\n<p>Followed by <code class=\"language-text\">-it</code> is short for <code class=\"language-text\">-i</code> and <code class=\"language-text\">-t</code>. Also familiar, <code class=\"language-text\">-it</code> allows you to interact with the container by using the command line.</p>\n</li>\n<li>\n<p>Because we ran the container with <code class=\"language-text\">--name looper</code>, we can now reference it easily.</p>\n</li>\n<li>\n<p>The image is <code class=\"language-text\">ubuntu</code> and what follows it is the command given to the container.</p>\n</li>\n</ul><p>And to check that it's running, run <code class=\"language-text\">docker container ls</code></p><p>Let's follow <code class=\"language-text\">-f</code> the output of logs with</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker logs -f looper\n  Thu Mar  1 15:51:29 UTC 2023\n  Thu Mar  1 15:51:30 UTC 2023\n  Thu Mar  1 15:51:31 UTC 2023\n  ...</code></pre></div><p>Let's test pausing the looper without exiting or stopping it. In another terminal run <code class=\"language-text\">docker pause looper</code>. Notice how the logs output has paused in the first terminal. To unpause run <code class=\"language-text\">docker unpause looper</code>.</p><p>Keep the logs open and attach to the running container from the second terminal using 'attach':</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper\n  Thu Mar  1 15:54:38 UTC 2023\n  Thu Mar  1 15:54:39 UTC 2023\n  ...</code></pre></div><p>Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running.</p><p>If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with <code class=\"language-text\">--no-stdin</code> option. Let's start the stopped container with <code class=\"language-text\">docker start looper</code> and attach to it with <code class=\"language-text\">--no-stdin</code>.</p><p>Then try control+c.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker start looper\n\n$ docker attach --no-stdin looper\n  Thu Mar  1 15:56:11 UTC 2023\n  Thu Mar  1 15:56:12 UTC 2023\n  ^C</code></pre></div><p>The container will continue running. Control+c now only disconnects you from the STDOUT.</p><p>To enter a container, we can start a new process in it.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux</code></pre></div><p>From the <code class=\"language-text\">ps aux</code> listing we can see that our <code class=\"language-text\">bash</code> process got PID (process ID) of 64.</p><p>Now that we're inside the container it behaves as you'd expect from Ubuntu, and we can exit the container with <code class=\"language-text\">exit</code> and then either kill or stop the container.</p><p>Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker kill looper\n$ docker rm looper</code></pre></div><p>Running the previous two commands is basically equivalent to running <code class=\"language-text\">docker rm --force looper</code></p><p>Let's start another process with <code class=\"language-text\">-it</code> and add <code class=\"language-text\">--rm</code> in order to remove it automatically after it has exited. The <code class=\"language-text\">--rm</code> ensures that there are no garbage containers left behind. It also means that <code class=\"language-text\">docker start</code> can not be used to start the container after it has exited.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -d --rm -it --name looper-it ubuntu sh -c &#39;while true; do date; sleep 1; done&#39;</code></pre></div><p>Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper-it\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence</code></pre></div><p>Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified <code class=\"language-text\">--rm</code> in <code class=\"language-text\">docker run</code> command.</p><exercise name=\"Exercise 1.3: Secret message\"><p>Now that we've warmed up it's time to get inside a container while it's running!</p><p>Image <code class=\"language-text\">devopsdockeruh/simple-web-service:ubuntu</code> will start a container that outputs logs into a file.\nGo inside the container and use <code class=\"language-text\">tail -f ./text.log</code> to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\".</p><p>Submit the secret message and command(s) given as your answer.</p></exercise><h3 id=\"ubuntu-in-a-container-is-just-ubuntu\" style=\"position:relative;\">Ubuntu in a container is just... Ubuntu<a href=\"#ubuntu-in-a-container-is-just-ubuntu\" aria-label=\"ubuntu in a container is just ubuntu permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>A container that is running a Ubuntu image works quite like a normal Ubuntu:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it ubuntu\nroot@881a1d4ecff2:/# ls\nbin   dev  home  media  opt   root  sbin  sys  usr\nboot  etc  lib   mnt    proc  run   srv   tmp  var\nroot@881a1d4ecff2:/# ps\n  PID TTY          TIME CMD\n    1 pts/0    00:00:00 bash\n   13 pts/0    00:00:00 ps\nroot@881a1d4ecff2:/# date\nWed Mar  1 12:08:24 UTC 2023\nroot@881a1d4ecff2:/#</code></pre></div><p>An image like Ubuntu contains already a nice set of tools but sometimes just the one that we need is not within the standard distribution. Let us assume that we would like to edit some files inside the container. The good old <a href=\"https://www.nano-editor.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Nano</a> editor is a perfect fit for our purposes. We can install it in the container by using <a href=\"https://help.ubuntu.com/community/AptGet/Howto\" target=\"_blank\" rel=\"noopener noreferrer\">apt-get</a>:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it ubuntu\nroot@881a1d4ecff2:/# apt-get update\nroot@881a1d4ecff2:/# apt-get -y install nano\nroot@881a1d4ecff2:/# cd tmp/\nroot@881a1d4ecff2:/tmp# nano temp_file.txt</code></pre></div><p>As can be seen, installing a program or library to a container happens just like the installation is done in \"normal\" Ubuntu. The remarkable difference is that the installation of Nano is not permanent, that is, if we remove our container, all is gone. We shall soon see how to get a more permanent solution for building images that are perfect to our purposes.</p><exercise name=\"Exercise 1.4: Missing dependencies\"><p>Start a ubuntu image with the process <code class=\"language-text\">sh -c 'echo \"Input website:\"; read website; echo \"Searching..\"; sleep 1; curl http://$website;'</code></p><p>You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the container actually waits for input.</p><blockquote>\n<p>Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container.</p>\n</blockquote><p>Test inputting <code class=\"language-text\">helsinki.fi</code> into the application. It should respond with something like</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>301 Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>The document has moved <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.helsinki.fi/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div><p>This time return the command you used to start process and the command(s) you used to fix the ensuing problems.</p><ul>\n<li>This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?</li>\n</ul></exercise></div>","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"},"fileAbsolutePath":"/home/runner/work/docker-hy.github.io/docker-hy.github.io/data/part-1/section-2.md"},"allPages":{"edges":[{"node":{"id":"4352ae37-1cc5-5973-956b-aa3c8cc1a438","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"e1238e90-e69f-5b89-ae7f-7a3890359b73","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"3cb91679-41d9-585e-8746-8d7f0fbc121a","frontmatter":{"path":"/getting-started","title":"Getting started"}}},{"node":{"id":"cc180895-565d-5264-95c9-d15f066c38c3","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"0601dd7a-78da-53bb-9402-15fadc681ddc","frontmatter":{"path":"/links","title":"Links"}}},{"node":{"id":"6c9405c1-39a6-56b2-934e-33850f881070","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"c5438964-0c78-52f9-b28f-f73711d88666","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"a8076827-affa-555a-b777-dba87c8e257f","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"d1d17462-978a-5516-8207-0fff56d3d301","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"b86409c3-2663-57ce-9a34-5ba818f8c6f7","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"f0602d39-4b70-5d33-81a1-44c74bc6a963","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"eb754b3f-0629-5970-a322-6a4dc4564d67","frontmatter":{"path":"/part-1/6-docker-hub","title":"Utilizing tools from the Registry"}}},{"node":{"id":"d1c71e59-47d3-54fd-a486-383c8377fe36","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"0c108910-d460-5d9b-8099-772363806cd1","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"5ecd7aff-3a9d-5952-a0e4-50e15971e6be","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"4007819b-0805-5da6-bf6a-99ded7c679ba","frontmatter":{"path":"/part-2/2-docker-networking","title":"Docker networking"}}},{"node":{"id":"fccc6c0d-db88-5605-9dcf-032a5afa0c28","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"}}},{"node":{"id":"d765d5bb-ef50-576a-8818-9938b2930e71","frontmatter":{"path":"/part-2/5-summary","title":"Summary"}}},{"node":{"id":"562b2219-bfee-5004-b19d-67666caa20c1","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"663340ff-6dff-50cc-9bb2-25940e07ee07","frontmatter":{"path":"/part-2/3-volumes-in-action","title":"Volumes in action"}}},{"node":{"id":"a43415c2-1067-541e-83ce-30fbd4938a64","frontmatter":{"path":"/part-3/1-deeper-understainding-of-containers","title":"Deeper understanding of containers"}}},{"node":{"id":"baa5a147-830d-5a73-b883-2eef8b123a54","frontmatter":{"path":"/part-3/3-using-non-root-user","title":"Using a non-root user"}}},{"node":{"id":"f13c2ceb-97e3-50e6-9153-9fd8c7b4eb5a","frontmatter":{"path":"/part-3/2-deployment-pipelines","title":"Deployment pipelines"}}},{"node":{"id":"b172f390-4ffa-568d-99e8-737985f35a70","frontmatter":{"path":"/part-3/4-optimizing-the-image-size","title":"Optimizing the image size"}}},{"node":{"id":"76657527-40ce-5179-88b3-0df3d0ae2ab9","frontmatter":{"path":"/part-3/5-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"3405a024-ea45-5fd0-8004-ec8726591ee1","frontmatter":{"path":"/part-3/6-end","title":"End"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["3294351120","994120085"]}